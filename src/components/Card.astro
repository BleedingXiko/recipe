---
interface Props {
	title: string;
	description: string;
	href: string;
	imageUrl: string;
	imageAlt: string;
	slug: string;
}

const { href, title, description, imageAlt, imageUrl, slug } = Astro.props;
---
<div class="card-grid" data-pagefind-ignore>
    <div class="custom-card">
        <a href={href} class="card-link">
            <div class="card-content">
                <div class="card-image">
                    <img src={imageUrl} alt={imageAlt} transition:name={`hero${slug}`}/>
                </div>
                <div class="card-details">
                    <h2>{title}</h2>
                    <p>{description}</p>
                </div>
            </div>
        </a>
    </div>
</div>


<script>
        const cards = document.querySelectorAll('.custom-card');

const options = {
    threshold: 1, // When  100% of the card is visible
};

let scaledCard = null;

const observer = new IntersectionObserver((entries) => {
    let closestEntry = null;

    entries.forEach((entry) => {
        if (entry.isIntersecting) {
            if (!closestEntry || Math.abs(0.5 - entry.intersectionRatio) < Math.abs(0.5 - closestEntry.intersectionRatio)) {
                closestEntry = entry;
            }
        }
    });

    if (closestEntry) {
        if (scaledCard) {
            scaledCard.classList.remove('scaled');
        }
        closestEntry.target.classList.add('scaled');
        scaledCard = closestEntry.target;
    }
}, options);

cards.forEach((card) => {
    observer.observe(card);
});
      document.addEventListener('astro:after-swap', () => {

    const cards = document.querySelectorAll('.custom-card');

    const options = {
        threshold: 1, // When  100% of the card is visible
    };

    let scaledCard = null;

    const observer = new IntersectionObserver((entries) => {
        let closestEntry = null;

        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                if (!closestEntry || Math.abs(0.5 - entry.intersectionRatio) < Math.abs(0.5 - closestEntry.intersectionRatio)) {
                    closestEntry = entry;
                }
            }
        });

        if (closestEntry) {
            if (scaledCard) {
                scaledCard.classList.remove('scaled');
            }
            closestEntry.target.classList.add('scaled');
            scaledCard = closestEntry.target;
        }
    }, options);

    cards.forEach((card) => {
        observer.observe(card);
    });

      });
</script>




<style>
        .scaled {
        transform: scale(1.05);
    }
    .card-grid {
        display: flex;
        justify-content: center; /* Center the cards horizontally */
        align-items: center; /* Center the cards vertically */
        flex-wrap: wrap; /* Allow cards to wrap to the next row */
        max-width: 1000px;
        margin: 0 auto;
        margin-bottom: 15px;
    }

    .custom-card {
        list-style: none;
        background-color: var(--secondary);
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 80%; /* Set the width of each card */
        margin: 10px; /* Add some margin between cards */
		transition: transform 0.3s ease;
    }
	@media (max-width: 760px){
		.custom-card{
			width: 60%;
		}
	}

    .custom-card:hover {
        transform: scale(1.05);
    }

    .card-link {
        text-decoration: none;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .card-content {
        display: flex;
        flex-direction: column;
        background-color: var(--primary);
        border-radius: 8px;
        height: 100%;
    }

    .card-image img {
        width: 100%;
        max-height: 200px;
        object-fit: cover;
        border-radius: 8px 8px 0 0;
    }

    .card-details {
        padding: 16px;
        text-align: center;
    }

    .card-details h2 {
        margin: 0;
        font-size: 1.25rem;
        color: var(--text);
    }

    .card-details p {
        margin-top: 0.5rem;
        margin-bottom: 0;
        color: var(--text);
    }

    a {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        padding: 10px;
    }
</style>
