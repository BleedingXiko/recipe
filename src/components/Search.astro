
<div class="container"> 
<input id="search" type="text" placeholder="Search..." maxlength="20">

<div id="results" />
</div>





{/*needs to be inline so i can access import */}
<script is:inline>
      document.addEventListener('astro:after-swap', () => {
  document.querySelector('#search')?.addEventListener('input', async (e) => {
          // Sanitize input using regex
          const sanitizedInput = e.target.value.replace(/[^a-zA-Z0-9]/g, "")
    // only load the pagefind script once
    if (e.target.dataset.loaded !== 'true') {
      e.target.dataset.loaded = 'true'
      // load the pagefind script
      window.pagefind = await import("/pagefind/pagefind.js");
    }
    
    // search the index using the input value
    const search = await window.pagefind.search(sanitizedInput)
    
    // clear the old results
    document.querySelector('#results').innerHTML = ''
    
    // add the new results
    for (const result of search.results) {
      const data = await result.data()
      document.querySelector('#results').innerHTML += `
      <a class="result" href="${data.url}">
        <h3>${data.meta.title}</h3>
        <p>${data.excerpt}</p>
        <svg class="line" xmlns="http://www.w3.org/2000/svg" width="100%" height="5" viewBox="0 0 100 5">
          <line x1="-200" y1="3" x2="500" y2="-6" stroke="var(--secondary)" stroke-width="5" />
          </svg>
          </a>
          `
        }
      })
    });
    
    document.querySelector('#search')?.addEventListener('input', async (e) => {
              // Sanitize input using regex
              const sanitizedInput = e.target.value.replace(/[^a-zA-Z0-9]/g, "")

      // only load the pagefind script once
      if (e.target.dataset.loaded !== 'true') {
        e.target.dataset.loaded = 'true'
        // load the pagefind script
        window.pagefind = await import("/pagefind/pagefind.js");
      }
      
      // search the index using the input value
      const search = await window.pagefind.search(sanitizedInput)
      
      // clear the old results
      document.querySelector('#results').innerHTML = ''
      
      // add the new results
      for (const result of search.results) {
        const data = await result.data()
        document.querySelector('#results').innerHTML += `
        <a class="result" href="${data.url}">
          <h3>${data.meta.title}</h3>
          <p>${data.excerpt}</p>
          <svg class="line" xmlns="http://www.w3.org/2000/svg" width="100%" height="5" viewBox="0 0 100 5">
            <line x1="-200" y1="3" x2="500" y2="-6" stroke="var(--secondary)" stroke-width="5" />
            </svg>
            </a>
            `
          }
        })
        </script>
        <style>
            .container {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                margin: auto;
            }
        
            /* Style for the search input */
            #search {
                width: 60%;
                padding: 10px;
                color: black;
                border: 1px solid var(--primary);
                border-radius: 5px;
                font-size: 16px;
                outline: none;
            }
        
            /* Style for the results container */
            #results {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                width: 60%;
                margin-top: 10px;
                padding: 10px;
                border: 1px solid var(--primary); 
                border-radius: 5px;
                background-color: var(--background); 
                transition: transform 0.3s ease;
            }
        
            /* Style for individual results */
            .container :global(.result) {
                margin-bottom: 15px;
                text-decoration: none;
                color: var(--text); /* Set text color to match your theme */
            }
            .container :global(a):hover {
            transform: scale(1.02);
        }
        
        
            .container :global(h3) {
                margin: 0;
                font-size: 1.5rem;
            }
        
            .container :global(p) {
                margin: 0;
                font-size: 1rem;
                margin-bottom: 20px;
            }
        
            .container :global(.line) {
              margin-bottom: 15px;
            }
        
            .container :global(mark){
              background-color: var(--accent)
            }
        </style>