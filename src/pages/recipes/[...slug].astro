---
import { getCollection } from 'astro:content';
import Chatbot from '../../components/Chatbot.tsx';
import Md from '../../layouts/Md.astro';

// Add prerender flag for static generation
export const prerender = true;

export async function getStaticPaths() {
  const blogEntries = await getCollection('recipes');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug }, 
    props: { entry }
  }));
}

const { entry } = Astro.props;
let Content;
try {
  const rendered = await entry.render();
  Content = rendered.Content;
} catch (error) {
  console.error("Error rendering content:", error);
}

// Create a recipe object with available data
const recipe = {
  title: entry.data.title,
  content: entry.data.description + "\n\n" + entry.body, // Use description + markdown body
};

// Getting the API key
const apiKey = import.meta.env.OPENROUTER_API_KEY;

---
<Md frontmatter={entry.data}>
  {Content && <Content />}
  <Chatbot apiKey={apiKey} recipe={recipe} client:load />
</Md>
